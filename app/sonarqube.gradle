apply plugin: 'org.sonarqube'

import java.util.regex.Matcher
import java.util.regex.Pattern

def getCurrentFlavor() {
    Gradle gradle = getGradle()
    String  tskReqStr = gradle.getStartParameter().getTaskRequests().toString()

    Pattern pattern;

    if( tskReqStr.contains( "assemble" ) )
        pattern = Pattern.compile("assemble(\\w+)(Release|Debug)")
    else if( tskReqStr.contains( "lint" ) )
        pattern = Pattern.compile("lint(\\w+)(Release|Debug)")
    else
       pattern = Pattern.compile("generate(\\w+)(Release|Debug)")

    Matcher matcher = pattern.matcher( tskReqStr )

    if( matcher.find() )
        return matcher.group(1).toLowerCase()
    else
    {
        println "NO MATCH FOUND"
        return "";
    }
}

def getCurrentApplicationId() {
    def currFlavor = getCurrentFlavor()

    def outStr = ''
    android.productFlavors.all{ flavor ->

        if( flavor.name==currFlavor )
            outStr=flavor.applicationId
    }

    return outStr
}
//gradlew assembleCorporateDebug sonarqube -PHOST_SONAR=http://localhost:9000
sonarqube() {
    def flavor = getCurrentFlavor();
    //noinspection GroovyAssignabilityCheck
    properties {
        /* SonarQube needs to be informed about your libraries and the android.jar to understand that methods like
     * onResume() is called by the Android framework. Without that information SonarQube will very likely create warnings
     * that those methods are never used and they should be removed. Same applies for libraries where parent classes
     * are required to understand how a class works and is used. */
        def libraries = project.android.sdkDirectory.getPath() + "/platforms/android-24/android.jar"
               /// "${project.buildDir}/intermediates/exploded-aar/**/classes.jar"
        property "sonar.projectName", (String) android.defaultConfig.applicationId
        property "sonar.projectKey", android.defaultConfig.applicationId + android.defaultConfig.versionName
        property "sonar.sourceEncoding", "UTF-8"

        property "sonar.sources", "./src/main/"
        property "sonar.libraries", libraries
        property "sonar.binaries", "/intermediates/classes/dev/debug"
        property "sonar.java.binaries", "${project.buildDir}/intermediates/classes/${flavor}/debug"
        property "sonar.java.libraries", libraries
        property "sonar.exclusions", "build/**,**/*.png,*.iml, **/*generated*, "

        property "sonar.import_unknown_files", true
        property "sonar.android.lint.report", "./build/outputs/lint-results.xml"
        //property "sonar.host.url", SONAR_HOST
        property "sonar.host.url", project.getProperty('HOST_SONAR')
        property "sonar.tests", "./src/test/, ./src/androidTest/"
        property "sonar.jacoco.reportPath", fileTree(dir: project.projectDir, includes: ['**/*.exec'])
        property "sonar.java.test.binaries", "${project.buildDir}/intermediates/classes/${flavor}/debug"
        property "sonar.jacoco.itReportPath", fileTree(dir: project.projectDir, includes: ['**/*.ec'])
        property "sonar.java.test.libraries", libraries

    }
}